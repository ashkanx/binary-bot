(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["binary-live-api"] = factory();
	else
		root["binary-live-api"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { throw err; };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var LiveEvents = function () {
	    function LiveEvents() {
	        _classCallCheck(this, LiveEvents);
	
	        this.messageHandlers = {};
	    }
	
	    _createClass(LiveEvents, [{
	        key: 'emitSingle',
	        value: function emitSingle(msgType, msgData) {
	            var handlers = this.messageHandlers[msgType] || [];
	            handlers.forEach(function (handler) {
	                handler(msgData);
	            });
	        }
	    }, {
	        key: 'emitWildcard',
	        value: function emitWildcard(msgData) {
	            var handlers = this.messageHandlers['*'] || [];
	            handlers.forEach(function (handler) {
	                handler(msgData);
	            });
	        }
	    }, {
	        key: 'emit',
	        value: function emit(msgType, msgData) {
	            this.emitSingle(msgType, msgData);
	            this.emitWildcard(msgData);
	        }
	    }, {
	        key: 'on',
	        value: function on(msgType, callback) {
	            if (!this.messageHandlers[msgType]) {
	                this.messageHandlers[msgType] = [callback];
	            } else {
	                this.messageHandlers[msgType].push(callback);
	            }
	        }
	    }]);
	
	    return LiveEvents;
	}();

	exports.default = LiveEvents;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.LiveApi = exports.LiveEvents = undefined;
	
	var _LiveEvents2 = __webpack_require__(0);
	
	var _LiveEvents3 = _interopRequireDefault(_LiveEvents2);
	
	var _LiveApi2 = __webpack_require__(2);
	
	var _LiveApi3 = _interopRequireDefault(_LiveApi2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.LiveEvents = _LiveEvents3.default;
	exports.LiveApi = _LiveApi3.default;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _LiveEvents = __webpack_require__(0);
	
	var _LiveEvents2 = _interopRequireDefault(_LiveEvents);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var MockWebSocket = function MockWebSocket() {};
	var WebSocket = typeof window !== 'undefined' ? window.WebSocket : MockWebSocket;
	
	var noSubscriptions = function noSubscriptions() {
	    return {
	        ticks: {},
	        priceProposal: null
	    };
	};
	
	var LiveApi = function () {
	    function LiveApi() {
	        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	        var _ref$apiUrl = _ref.apiUrl;
	        var apiUrl = _ref$apiUrl === undefined ? 'wss://ws.binaryws.com/websockets/v3' : _ref$apiUrl;
	        var _ref$language = _ref.language;
	        var language = _ref$language === undefined ? 'en' : _ref$language;
	        var websocket = _ref.websocket;
	
	        _classCallCheck(this, LiveApi);
	
	        // options is arguments
	        var options = arguments[0];
	        this.apiUrl = apiUrl;
	        this.language = language;
	        this.status = LiveApi.Status.Unknown;
	        this.subscriptions = noSubscriptions();
	
	        this.bufferedSends = [];
	        this.bufferedExecutes = [];
	        this.unresolvedPromises = {};
	
	        this.events = new _LiveEvents2.default();
	
	        if (websocket) {
	            WebSocket = options.websocket;
	        }
	
	        this.connect();
	    }
	
	    _createClass(LiveApi, [{
	        key: 'connect',
	        value: function connect() {
	            this.socket = new WebSocket(this.apiUrl + '?l=' + this.language);
	            this.socket.onopen = this.onOpen.bind(this);
	            this.socket.onclose = this.onClose.bind(this);
	            this.socket.onerror = this.onError.bind(this);
	            this.socket.onmessage = this.onMessage.bind(this);
	
	            if (this.token) {
	                this.authorize(this.token);
	            }
	        }
	    }, {
	        key: 'disconnect',
	        value: function disconnect() {
	            this.token = '';
	            this.socket.onclose = undefined;
	            this.socket.close();
	        }
	    }, {
	        key: 'changeLanguage',
	        value: function changeLanguage(ln) {
	            if (ln === this.language) {
	                return;
	            }
	            this.socket.onclose = undefined;
	            this.socket.close();
	            this.language = ln;
	            this.connect();
	            this.resubscribe();
	        }
	    }, {
	        key: 'isReady',
	        value: function isReady() {
	            return this.socket && this.socket.readyState === 1;
	        }
	    }, {
	        key: 'sendBufferedSends',
	        value: function sendBufferedSends() {
	            while (this.bufferedSends.length > 0) {
	                this.socket.send(JSON.stringify(this.bufferedSends.shift()));
	            }
	        }
	    }, {
	        key: 'executeBufferedExecutes',
	        value: function executeBufferedExecutes() {
	            while (this.bufferedExecutes.length > 0) {
	                this.bufferedExecutes.shift()();
	            }
	        }
	    }, {
	        key: 'onOpen',
	        value: function onOpen() {
	            this.sendBufferedSends();
	            this.executeBufferedExecutes();
	        }
	    }, {
	        key: 'onClose',
	        value: function onClose() {
	            var _this = this;
	
	            setTimeout(function () {
	                _this.connect();
	                _this.resubscribe();
	            }, 1000);
	        }
	    }, {
	        key: 'onError',
	        value: function onError(error) {
	            // for process manager like pm2.
	            // It's necessary to print error with console.error.
	            // It will make error readable on error.log
	            window.console.error(error);
	
	            // And also make process exiting to respawn.
	            if (typeof process === 'function') {
	                process.exit();
	            }
	        }
	    }, {
	        key: 'resolvePromiseForResponse',
	        value: function resolvePromiseForResponse(json) {
	            var reqId = json.req_id.toString();
	            var promise = this.unresolvedPromises[reqId];
	            if (promise) {
	                delete this.unresolvedPromises[reqId];
	                if (!json.error) {
	                    promise.resolve(json);
	                } else {
	                    promise.reject(json.error);
	                }
	            }
	        }
	    }, {
	        key: 'onMessage',
	        value: function onMessage(message) {
	            var json = JSON.parse(message.data);
	
	            if (!json.error) {
	                this.events.emit(json.msg_type, json);
	            }
	
	            if (json.req_id) {
	                return this.resolvePromiseForResponse(json);
	            }
	        }
	    }, {
	        key: 'generatePromiseForRequest',
	        value: function generatePromiseForRequest(json) {
	            var _this2 = this;
	
	            var reqId = json.req_id.toString();
	
	            return new Promise(function (resolve, reject) {
	                _this2.unresolvedPromises[reqId] = { resolve: resolve, reject: reject };
	            });
	        }
	    }, {
	        key: 'sendRaw',
	        value: function sendRaw(json) {
	            if (this.isReady()) {
	                this.socket.send(JSON.stringify(json));
	            } else {
	                this.bufferedSends.push(json);
	            }
	
	            if (json.req_id) {
	                return this.generatePromiseForRequest(json);
	            }
	        }
	    }, {
	        key: 'send',
	        value: function send(json) {
	            var reqId = Math.floor(Math.random() * 1e15);
	            return this.sendRaw(_extends({
	                req_id: reqId
	            }, json));
	        }
	    }, {
	        key: 'execute',
	        value: function execute(func) {
	            if (this.isReady()) {
	                func();
	            } else {
	                this.bufferedExecutes.push(func);
	            }
	        }
	    }, {
	        key: 'resubscribe',
	        value: function resubscribe() {
	            var _subscriptions = this.subscriptions;
	            var ticks = _subscriptions.ticks;
	            var priceProposal = _subscriptions.priceProposal;
	
	            this.subscribeToTicks(Object.keys(ticks));
	
	            if (priceProposal) {
	                this.subscribeToPriceForContractProposal(priceProposal);
	            }
	        }
	
	        // Unauthenticated Calls
	
	    }, {
	        key: 'getActiveSymbolsBrief',
	        value: function getActiveSymbolsBrief() {
	            return this.send({
	                active_symbols: 'brief'
	            });
	        }
	    }, {
	        key: 'getActiveSymbolsFull',
	        value: function getActiveSymbolsFull() {
	            return this.send({
	                active_symbols: 'full'
	            });
	        }
	    }, {
	        key: 'getAssetIndex',
	        value: function getAssetIndex() {
	            return this.send({
	                asset_index: 1
	            });
	        }
	    }, {
	        key: 'getContractsForSymbol',
	        value: function getContractsForSymbol(symbol) {
	            return this.send({
	                contracts_for: symbol
	            });
	        }
	    }, {
	        key: 'getLandingCompany',
	        value: function getLandingCompany(landingCompany) {
	            return this.send({
	                landing_company: landingCompany
	            });
	        }
	    }, {
	        key: 'getLandingCompanyDetails',
	        value: function getLandingCompanyDetails(landingCompany) {
	            return this.send({
	                landing_company_details: landingCompany
	            });
	        }
	    }, {
	        key: 'createVirtualAccount',
	        value: function createVirtualAccount(options) {
	            return this.send(_extends({
	                new_account_virtual: 1
	            }, options));
	        }
	    }, {
	        key: 'getPayoutCurrencies',
	        value: function getPayoutCurrencies() {
	            return this.send({
	                payout_currencies: 1
	            });
	        }
	    }, {
	        key: 'ping',
	        value: function ping() {
	            return this.send({
	                ping: 1
	            });
	        }
	    }, {
	        key: 'getServerTime',
	        value: function getServerTime() {
	            return this.send({
	                time: 1
	            });
	        }
	    }, {
	        key: 'getPaymentAgentsForCountry',
	        value: function getPaymentAgentsForCountry(countryCode) {
	            return this.send({
	                paymentagent_list: countryCode
	            });
	        }
	    }, {
	        key: 'getResidences',
	        value: function getResidences() {
	            return this.send({
	                residence_list: 1
	            });
	        }
	    }, {
	        key: 'getStatesForCountry',
	        value: function getStatesForCountry(countryCode) {
	            return this.send({
	                states_list: countryCode
	            });
	        }
	    }, {
	        key: 'getTickHistory',
	        value: function getTickHistory(symbol) {
	            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	            return this.send(_extends({
	                ticks_history: symbol
	            }, options));
	        }
	    }, {
	        key: 'getTradingTimes',
	        value: function getTradingTimes() {
	            var date = arguments.length <= 0 || arguments[0] === undefined ? new Date() : arguments[0];
	
	            var dateStr = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();
	            return this.send({
	                trading_times: dateStr
	            });
	        }
	    }, {
	        key: 'getPriceProposalForContract',
	        value: function getPriceProposalForContract(options) {
	            return this.send(_extends({
	                proposal: 1
	            }, options));
	        }
	    }, {
	        key: 'verifyEmail',
	        value: function verifyEmail(email) {
	            return this.send({
	                verify_email: email
	            });
	        }
	
	        // Unathenticated Streams
	
	    }, {
	        key: 'subscribeToTick',
	        value: function subscribeToTick(symbol) {
	            this.subscriptions.ticks[symbol] = true;
	
	            this.send({
	                ticks: symbol
	            });
	        }
	    }, {
	        key: 'subscribeToTicks',
	        value: function subscribeToTicks(symbols) {
	            var _this3 = this;
	
	            symbols.forEach(function (s) {
	                return _this3.subscriptions.ticks[s] = true;
	            });
	
	            this.send({
	                ticks: symbols
	            });
	        }
	    }, {
	        key: 'subscribeToPriceForContractProposal',
	        value: function subscribeToPriceForContractProposal(options) {
	            return this.send(_extends({
	                proposal: 1,
	                subscribe: 1
	            }, options));
	        }
	    }, {
	        key: 'subscribeToBalance',
	        value: function subscribeToBalance() {
	            return this.send({
	                balance: 1,
	                subscribe: 1
	            });
	        }
	    }, {
	        key: 'subscribeToOpenContract',
	        value: function subscribeToOpenContract(contractId) {
	            return this.send({
	                proposal_open_contract: 1,
	                subscribe: 1,
	                fmd_id: contractId
	            });
	        }
	    }, {
	        key: 'subscribeToAllOpenContracts',
	        value: function subscribeToAllOpenContracts() {
	            return this.send({
	                proposal_open_contract: 1,
	                subscribe: 1
	            });
	        }
	    }, {
	        key: 'unsubscribeFromTick',
	        value: function unsubscribeFromTick(symbol) {
	            delete this.subscriptions.ticks[symbol];
	
	            return this.send({
	                forget: symbol
	            });
	        }
	    }, {
	        key: 'unsubscribeFromTicks',
	        value: function unsubscribeFromTicks(symbols) {
	            symbols.forEach(this.unsubscribeFromTick);
	        }
	    }, {
	        key: 'unsubscribeFromAllTicks',
	        value: function unsubscribeFromAllTicks() {
	            this.subscriptions.ticks = {};
	
	            return this.send({
	                forget_all: 'ticks'
	            });
	        }
	    }, {
	        key: 'unsubscribeFromAllProposals',
	        value: function unsubscribeFromAllProposals() {
	            this.subscriptions.priceProposal = null;
	
	            return this.send({
	                forget_all: 'proposal'
	            });
	        }
	    }, {
	        key: 'unsubscribeByID',
	        value: function unsubscribeByID(id) {
	            return this.send({
	                forget: id
	            });
	        }
	    }, {
	        key: 'unsubscribeFromAllPortfolios',
	        value: function unsubscribeFromAllPortfolios() {
	            this.subscriptions.portfolio = false;
	
	            return this.send({
	                forget_all: 'portfolio'
	            });
	        }
	    }, {
	        key: 'unsubscribeFromAlProposals',
	        value: function unsubscribeFromAlProposals() {
	            this.subscriptions = noSubscriptions();
	
	            return this.send({
	                forget_all: 'proposal_open_contract'
	            });
	        }
	
	        // Authenticated Calls (no side effects)
	
	    }, {
	        key: 'authorize',
	        value: function authorize(token) {
	            this.token = token;
	            return this.send({
	                authorize: token
	            });
	        }
	    }, {
	        key: 'getAccountLimits',
	        value: function getAccountLimits() {
	            return this.send({
	                get_limits: 1
	            });
	        }
	    }, {
	        key: 'getAccountSettings',
	        value: function getAccountSettings() {
	            return this.send({
	                get_settings: 1
	            });
	        }
	    }, {
	        key: 'getAccountStatus',
	        value: function getAccountStatus() {
	            return this.send({
	                get_account_status: 1
	            });
	        }
	    }, {
	        key: 'getSelfExclusion',
	        value: function getSelfExclusion() {
	            return this.send({
	                get_self_exclusion: 1
	            });
	        }
	    }, {
	        key: 'getStatement',
	        value: function getStatement() {
	            var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	            return this.send(_extends({
	                statement: 1
	            }, options));
	        }
	    }, {
	        key: 'getPortfolio',
	        value: function getPortfolio() {
	            return this.send({
	                portfolio: 1
	            });
	        }
	    }, {
	        key: 'getProfitTable',
	        value: function getProfitTable() {
	            var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	            return this.send(_extends({
	                profit_table: 1
	            }, options));
	        }
	
	        // Authenticated Calls (with side effects)
	
	    }, {
	        key: 'buyContract',
	        value: function buyContract(contractId, price) {
	            return this.send({
	                buy: contractId,
	                price: price
	            });
	        }
	    }, {
	        key: 'sellContract',
	        value: function sellContract(contractId, price) {
	            return this.send({
	                sell: contractId,
	                price: price
	            });
	        }
	    }, {
	        key: 'createRealAccount',
	        value: function createRealAccount(options) {
	            return this.send(_extends({
	                new_account_real: 1
	            }, options));
	        }
	    }, {
	        key: 'createRealAccountMaltaInvest',
	        value: function createRealAccountMaltaInvest(options) {
	            return this.send(_extends({
	                new_account_maltainvest: 1
	            }, options));
	        }
	    }, {
	        key: 'withdrawToPaymentAgent',
	        value: function withdrawToPaymentAgent(options) {
	            return this.send(_extends({
	                paymentagent_withdraw: 1
	            }, options));
	        }
	    }, {
	        key: 'paymentAgentTransfer',
	        value: function paymentAgentTransfer(options) {
	            return this.send(_extends({
	                paymentagent_transfer: 1
	            }, options));
	        }
	    }, {
	        key: 'setSelfExclusion',
	        value: function setSelfExclusion(options) {
	            return this.send(_extends({
	                set_self_exclusion: 1
	            }, options));
	        }
	    }, {
	        key: 'setAccountSettings',
	        value: function setAccountSettings(options) {
	            return this.send(_extends({
	                set_settings: 1
	            }, options));
	        }
	    }]);
	
	    return LiveApi;
	}();
	
	LiveApi.Status = {
	    Unknown: 'unknown',
	    Connected: 'connected'
	};
	exports.default = LiveApi;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 3 */
/***/ function(module, exports) {

	// shim for using process in browser
	
	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ }
/******/ ])
});
;
//# sourceMappingURL=binary-live-api.js.map